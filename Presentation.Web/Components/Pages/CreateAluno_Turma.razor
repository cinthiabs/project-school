@page "/aluno-turma-create"
@page "/aluno-turma-create/{Id:int}"

@using Presentation.Web.Models.DTOs;
@using Presentation.Web.Services;
@using System.Net
@inject IAlunoService _alunoService;
@inject ITurmaService _turmaService;
@inject IAluno_TurmaService _alunoTurmaService;

<h3>@Title</h3>

<EditForm method="post" Model="alunoTurma" OnValidSubmit="OnValidSubmit" FormName="aluno-turma-create">
    <div class="mb-3">
        <label for="Aluno">Aluno:</label>
        <InputSelect @bind-Value="selectedAlunoId" class="form-control">
            <option value="">Selecione um aluno</option>
            @if (alunos != null && alunos.Any())
            {
                @foreach (var aluno in alunos)
                {
                    <option value="@aluno.Id">@aluno.Nome</option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label" for="Turma_Id">Turma:</label>
        <InputSelect @bind-Value="selectedTurmaId" class="form-control">
            <option value="">Selecione uma turma</option>
            @if (turmas != null && turmas.Any())
            {
                @foreach (var turma in turmas)
                {
                    <option value="@turma.Id">@turma.Turma</option>
                }
            }
        </InputSelect>
    </div>
    @if (!string.IsNullOrEmpty(sMessage))
    {
        <p class="text-danger">@sMessage</p>
    }
    <button type="submit" class="btn btn-primary">@ButtonText</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    string Title { get; set; }
    string ButtonText { get; set; }
    string sMessage { get; set; }

    Aluno_TurmaDTO alunoTurma = new Aluno_TurmaDTO();


    [SupplyParameterFromForm]
    public int selectedAlunoId { get; set; } = new ();

    [SupplyParameterFromForm]
    public int selectedTurmaId { get; set; } = new();

    IEnumerable<AlunoDTO> alunos;
    IEnumerable<TurmaDTO> turmas;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            alunos = await _alunoService.GetAll();
            turmas = await _turmaService.GetAll();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar alunos e turmas: {ex.Message}");
        }

        if (Id != 0)
        {
            alunoTurma = await _alunoTurmaService.GetById(Id);
            Title = "Editar Relacionamento";
            ButtonText = "Atualizar";
        }
        else
        {
            alunoTurma = new Aluno_TurmaDTO();
            Title = "Novo Relacionamento";
            ButtonText = "Criar";
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (alunoTurma.Id == 0)
            {
                alunoTurma.Data_Criacao = DateTime.Now;
                alunoTurma.Ativo = true;
                alunoTurma.Turma_Id = selectedTurmaId;
                alunoTurma.Aluno_Id = selectedAlunoId;

                var response = await _alunoTurmaService.Create(alunoTurma);

                if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    sMessage = await response.Content.ReadAsStringAsync();
                    StateHasChanged();
                    return;
                }
                sMessage = "Cadastro realizado com sucesso!";
            }
            else
            {
                await _alunoTurmaService.Update(alunoTurma.Id, alunoTurma);
                sMessage = "Cadastro atualizado com sucesso!";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cadastrar relacionamento: {ex.Message}");
        }
    }
}
