@page "/aluno-create"
@page "/aluno-create/{Id:int}"
@using Presentation.Web.Models.DTOs;
@using Presentation.Web.Services;
@using System.Net
@inject IAlunoService _alunoService;


<h3>@Title</h3>

<EditForm method="post" Model="aluno" OnValidSubmit="OnValidSubmit" FormName="aluno-create" Enhance>
    <div class="mb-3">
        <label class="form-label" for="Nome">Nome:</label>
        <InputText class="form-control" @bind-Value="@aluno.Nome" requerid />
    </div>
    <div class="mb-3">
        <label class="form-label" for="Usuario">Usuário:</label>
        <InputText class="form-control" @bind-Value="@aluno.Usuario" />
    </div>
    @if (Id == 0) 
    {
        <div class="mb-3">
            <label class="form-label" for="Senha">Senha:</label>
            <InputText @bind-Value="@aluno.Senha" class="form-control" type="password" />
        </div>
    }
    else
    {
        <div class="mb-3">
            <label class="form-label" for="Senha">Nova Senha:</label>
            <InputText @bind-Value="@novaSenha" class="form-control" type="password" />
        </div>
    }
    @if (!string.IsNullOrEmpty(sMessage))
    {
        <p class="text-danger">@sMessage</p>
    }
    <button type="submit" class="btn btn-primary">@ButtonText</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    string Title { get; set; }
    string ButtonText { get; set; }
    string sMessage { get; set; }

    [SupplyParameterFromForm]
    AlunoDTO aluno { get; set; } = new();

    [SupplyParameterFromForm]
    string novaSenha { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            aluno = await _alunoService.GetById(Id);
            Title = "Editar Aluno";
            ButtonText = "Atualizar";
        }
        else
        {
            Title = "Novo Aluno";
            ButtonText = "Criar";
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (aluno.Nome == "" || aluno.Senha == "" || aluno.Usuario == "")
            {
                sMessage = "Preencha todos os campos!";
                return;
            }


            if (Id == 0)
            {
                aluno.Data_Criacao = DateTime.Now;
                aluno.Ativo = true;
                var response = await _alunoService.Create(aluno);

                if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    sMessage = await response.Content.ReadAsStringAsync();
                    StateHasChanged();
                    return;
                }
                sMessage = "Cadastro realizado com sucesso!";
                aluno = new AlunoDTO();
            }
            else 
            {
                if (!string.IsNullOrEmpty(novaSenha))
                {
                    aluno.Senha = novaSenha;
                }
                var response = await _alunoService.Update(aluno.Id, aluno);

                if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    sMessage = await response.Content.ReadAsStringAsync();
                    StateHasChanged();
                    return;
                }
                sMessage = "Cadastro atualizado com sucesso!";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cadastrar aluno: {ex.Message}");
        }
    }
}
